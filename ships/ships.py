class Ship:
    def __init__(self, ship_class, components):
        self.ship_class = ship_class
        self.components = components

        # Derived stats
        self.total_mass = sum(c.mass for c in components)
        self.total_volume = sum(c.volume for c in components)
        self.total_power_draw = sum(getattr(c, 'power_draw', 0) for c in components)
        self.total_crew_required = sum(c.crew_required for c in components)

        self.warp_core = next((c for c in components if c.type == "warp_core"), None)
        self.power_output = self.warp_core.power_output if self.warp_core else 0

    def validate(self):
        errors = []

        if self.total_mass > self.ship_class.hull_mass_limit:
            errors.append("Exceeds hull mass limit")

        if self.total_volume > self.ship_class.volume_capacity:
            errors.append("Exceeds internal volume capacity")

        if len(self.components) > self.ship_class.component_hardpoints:
            errors.append("Too many components for available hardpoints")

        if self.total_power_draw > self.ship_class.power_handling_cap:
            errors.append("Power draw exceeds ship's EPS handling capacity")

        if self.power_output < self.total_power_draw:
            errors.append("Insufficient power generated by warp core")

        if self.total_crew_required > self.ship_class.crew_capacity:
            errors.append("Crew required exceeds life support limit")

        # Validate required components
        if not self.warp_core:
            errors.append("Missing warp core")

        return errors